{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GNE Solver","text":"<p>A Python library to compute Generalized Nash Equilibria.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>  pip install gne-solver\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#flatten-variables","title":"Flatten Variables","text":"<p>Flatten a collection of vectors and scalars into a single list.</p> <p>This utility is typically used in optimization routines that require all decision variables to be represented as a flat one-dimensional array.</p> <p>Parameters:</p> Name Type Description Default <code>vectors</code> <code>list of numpy.ndarray</code> <p>List of one- or two-dimensional arrays (commonly column vectors with shape <code>(n_i, 1)</code>) to be flattened.</p> required <code>scalars</code> <code>list of float or numpy.ndarray</code> <p>Scalars to append after the flattened vectors. Can be provided either as a Python list of floats or as a NumPy array of shape <code>(m,)</code>.</p> required <p>Returns:</p> Type Description <code>list of float</code> <p>A flat list containing all vector entries followed by the scalars.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; vectors = [np.array([[1.0], [2.0]]), np.array([[3.0]])]\n&gt;&gt;&gt; scalars = [4.0, 5.0]\n&gt;&gt;&gt; flatten_variables(vectors, scalars)\n[1.0, 2.0, 3.0, 4.0, 5.0]\n</code></pre> <p>checks</p>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"development/overview/","title":"Development","text":"<p>Example of documentation using same theme FastAPI</p> <p>Theme documentation: Material for MkDocs</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"development/overview/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve --livereload</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"development/overview/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"development/standards/","title":"\ud83d\udcd6 Docstring Guidelines (NumPy Style)","text":"<p>This document defines the standard docstring format to be used across the project. We follow the NumPy style conventions, as supported by mkdocstrings and rendered by Material for MkDocs.</p>"},{"location":"development/standards/#1-general-principles","title":"1. General Principles","text":"<ul> <li>Every public function, class, method, and module must have a docstring.  </li> <li>Use NumPy style sections (<code>Parameters</code>, <code>Returns</code>, <code>Raises</code>, <code>Examples</code>, etc.).  </li> <li>Start with a short, one-line summary in imperative mood (e.g., \"Compute equilibrium strategies\", not \"This function computes...\").  </li> <li>Follow with an extended description if necessary.  </li> <li>Keep line length reasonable (~79\u2013100 chars).  </li> <li>Private functions (starting with <code>_</code>) may have shorter docstrings, but should still explain purpose if non-trivial.  </li> </ul>"},{"location":"development/standards/#2-function-method-docstrings","title":"2. Function &amp; Method Docstrings","text":""},{"location":"development/standards/#template","title":"Template","text":"<pre><code>def function_name(param1: int, param2: str = \"default\") -&gt; float:\n    \"\"\"\n    One-line summary of the function.\n\n    Extended description if necessary. Can span multiple sentences to\n    explain the context, usage, or algorithm.\n\n    Parameters\n    ----------\n    param1 : int\n        Description of the parameter. Include units if applicable.\n    param2 : str, optional\n        Description of the parameter. State the default if not obvious\n        from the signature.\n\n    Returns\n    -------\n    float\n        Description of the return value.\n\n    Raises\n    ------\n    ValueError\n        Explanation of the condition that causes this exception.\n\n    Examples\n    --------\n    &gt;&gt;&gt; result = function_name(5, \"option\")\n    &gt;&gt;&gt; print(result)\n    3.14\n    \"\"\"\n</code></pre>"},{"location":"development/standards/#3-function-method-docstrings","title":"3. Function &amp; Method Docstrings","text":""},{"location":"development/standards/#template_1","title":"Template","text":"<pre><code>class Solver:\n    \"\"\"\n    Generalized Nash Equilibrium solver.\n\n    Provides algorithms to compute equilibria in generalized Nash games.\n\n    Parameters\n    ----------\n    tol : float, optional\n        Convergence tolerance. Default is ``1e-6``.\n    max_iter : int, optional\n        Maximum number of iterations. Default is ``1000``.\n\n    Attributes\n    ----------\n    tol : float\n        Convergence tolerance.\n    max_iter : int\n        Maximum number of iterations.\n\n    See Also\n    --------\n    create_game : Utility to create game instances.\n    flatten_variables : Function used internally to reshape variables.\n    \"\"\"\n\n</code></pre>"},{"location":"development/standards/#module-docstrings","title":"Module Docstrings","text":"<p>At the top of every Python file:</p> <pre><code>\"\"\"\nUtilities for game creation.\n\nThis module provides helper functions to build and initialize\ngeneralized Nash equilibrium problems.\n\"\"\"\n\n</code></pre>"},{"location":"development/standards/#sections-to-use","title":"Sections to Use","text":"Section When to Use Notes Parameters Always Document type, shape, and description. Returns If function returns something Be explicit about types and shapes. Raises If function can raise exceptions Name the exception and explain why. Attributes For classes List important public attributes. See Also Optional Cross-reference related functions/classes. Examples Strongly encouraged Use <code>&gt;&gt;&gt;</code> doctest style. Keep minimal but runnable."},{"location":"development/standards/#examples-style","title":"Examples Style","text":"<ul> <li>Always use &gt;&gt;&gt; prompt.</li> <li>Show inputs and outputs.</li> <li>Keep examples small, self-contained, and copy-pasteable.</li> <li>Example blocks must be valid Python so they can be tested via pytest --doctest-modules.</li> </ul>"},{"location":"development/standards/#good-example","title":"Good Example:","text":"<pre><code>Examples\n--------\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; vectors = [np.array([[1.0], [2.0]]), np.array([[3.0]])]\n&gt;&gt;&gt; scalars = [4.0, 5.0]\n&gt;&gt;&gt; flatten_variables(vectors, scalars)\n[1.0, 2.0, 3.0, 4.0, 5.0]\n\n</code></pre>"},{"location":"development/standards/#dos-and-donts","title":"Do's and Don'ts","text":"<p>\u2705 Do:</p> <ul> <li>Use backticks for code (e.g., \"matrix\").</li> <li>Be explicit with shapes (array of shape (n, m)).</li> <li>Keep summaries short and imperative.</li> </ul> <p>\u274c Don\u2019t:</p> <ul> <li>Repeat type hints unnecessarily: \"param1 : int, an integer\" is redundant.</li> <li>Write personal notes or informal language.</li> <li>Omit examples for important public functions.</li> </ul>"}]}